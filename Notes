\ -> can be used to print out "(Quotation marks in the print statements as python considers illiterate anything post this.
Example:
print("Pixie\"Academy")
Out: Pixie"Academy
Example:
print("Pixie\nAcademy")
Out: Pixie
     Academy
---------------
phrase = "Pixie Academy"
print(phrase.index("A"))
Out:6
---------
phrase = "Pixie Academy"
print(phrase.replace("Academy","Academia"))
Out: Pixie Academia
--------------
from math import *

print(pow(4,3))
print(max(4,3))
print(min(4,3))
print(round(3.7))
# Math functions from the import
print(floor(3.14))
print(ceil(3.14))
print(sqrt(36))

Out:
4
3
4
3
4
6.0
-------------
Input

name = input("Enter your name: ")
age = input("Enter your age: ")
print("Hello " + name + "! you are " + age + " years young")

Out:
Enter your name: Akki
Enter your age: 28
Hello Akki! you are 28 years young
-------
Basic Calculator:
num1 = input("Enter a number: ")
num2 = input("Enter another number: ")
result = float(num1) + float(num2)

print(result)

Out:
Enter a number: 12
Enter another number: 34
46.0
----------
# MadLibs Game
color = input("Enter a color: ")
plural_noun = input("Enter a plural noun: ")
person = input("Enter a name: ")

print("Rose are " + color)
print(plural_noun + " are blue")
print("I love " + person)

out:
Enter a color: Red
Enter a plural noun: Violets
Enter a name: Pixie
Rose are Red
Violets are blue
I love Pixie
---------------
# Lists
numbers = [1,2,3,4,5,6,7]
friends = ["Jim", "Pam", "Dwight", "Angela", "Kevin"]
# Lists can include any information within it. Including numbers, strings and boolean
# print(friends[1:3])
#The above statement will print out string at index 1 till 3 range but, not including 3
# friends.extend(numbers)
# Extend the list by adding another list at the end of the list being extended
# friends.append("Michael")
# Append another name at the end of the list with the use of append function
# print(friends)
friends.insert(5, "Michael")
# friends.remove("Michael")
friends.pop()
print(friends)
print(friends.index("Angela"))

Out:
['Jim', 'Pam', 'Dwight', 'Angela', 'Kevin']
3

Important list functions
friends.count("Jim"): Will give us the count of the string repeated in the list.
friends.pop(): will remove the last item from the list
friends.append("michael"): will append the string at the end of the list
friends.insert(1,"karen"): will insert the string at the provided index 1 in the list
friends.sort(): will sort the list in an alphabetical order or Ascending order
friends.reverse(): Will reverse the order of the list
friends2 = friends.copy(): Friends2 will have a copy of friends list
-------------
TUPPLES: An Immutable item similar to lists in () instead of [] but, they are immutable. Meaning we cannot modify or change or insert the items
This can be used when data doesn't change and is constant throughout the program. You can have multiple tupples but, cannot be modified.
You can also create a list of tupples if need be.
Example:
coordinates = [(4,5), (1,2), (8,1)]
----------
Functions:
A function is a collection of code which performs a specific task/s
use lowercase names for the function

#Functions
def say_hi(name, age):
    print("Hello " +name +"! you are " +age)

say_hi("Michael","32")
say_hi("Jim","28")

Out:
Hello Michael! you are 32
Hello Jim! you are 28
--
def cube(num):
    return num*num*num
# return breaks out of the function so any line written post return will not be run
result = cube(33)
print(result)

Out:
35937
---------
# If statements
is_male = True
is_tall = False

if is_male and is_tall:
    print("You are a tall male")
else:
    print("You are either not male or not tall or both")

out:
You are either not male or not tall or both
------
import keyword
print(keyword.kwlist)

out: 'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
-----------
comparing 3 numbers are give largest number as output

def max_num(num1, num2, num3):
    if num1 >= num2 and num1 >= num3:
        return num1
    elif num2 >= num1 and num2 >= num3:
        return num2
    else:
        return num3

print(max(220,321,800))

out:
800
---------
# Building a Calculator

num1 = float(input("Enter your first number: "))
op = input("Enter your operator: ")
num2 = float(input("Enter your second number: "))

if op == "+":
    print(num1 + num2)
elif op == "-":
    print(num1 - num2)
elif op == "*":
    print(num1 * num2)
elif op == "/":
    print(num1 / num2)
else:
    print("Invalid Operator")

out:
Enter your first number: 12
Enter your operator: /
Enter your second number: 2
6.0
-------------------
# Dictionaries - Keys needs to be unique reference like a string or a number. Dictionaries won't allow duplicate key references

monthConversions = {
    "Jan": "January",
    "Feb": "February",
    "Mar": "March",
    "Apr": "April",
    "May": "May",
    "Jun": "June",
    "Jul": "July",
    "Aug": "August",
    "Sep": "September",
    "Oct": "October",
    "Nov": "November",
    "Dec": "December"
}

# Key reference
print(monthConversions["Feb"])
# Passing a default key if there are no key references
print(monthConversions.get("Mar"))
print(monthConversions.get("Luv", "Not a valid key"))

out:
February
March
Not a valid key
--------------
While loop

i = 1
while i <= 10:
    print(i)
    i += 1

print("Done with the loop")

Out:
1
2
3
4
5
6
7
8
9
10
Done with the loop
--------
# Guessing Game
secret_word = "Pixie"
guess = ""
guess_count = 0
guess_limit = 3
out_of_guesses = False

while guess != secret_word and not out_of_guesses:
    if guess_count < guess_limit:
        guess = input("Guess the secret word: ")
        guess_count += 1
    else:
        out_of_guesses = True

if out_of_guesses:
    print("Out of guesses, You LOSE!")
else:
    print("You Win!")

---------
#Exponent function

def raise_to_power (base_num, pow_num):
    result = 1
    for index in range(pow_num):
        result = result * base_num
    return result

print(raise_to_power(3,3))

Out: 27
-------
2D - List

num_grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [0]
]

print(num_grid[0][1])

out: 2
-------
#Nested for loop

num_grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [0]
]

for row in num_grid:
    for col in row:
        print(col)

out:
1
2
3
4
5
6
7
8
9
0
--------
Translation to g

def translate(phrase):
    res_phrase = ""
    for index in phrase:
        if index in 'aeiou':
            res_phrase = res_phrase + 'g'
        elif index in 'AEIOU':
            res_phrase = res_phrase + 'G'
        else:
            res_phrase = res_phrase+index
    return res_phrase

print(translate(input('Enter a phrase: ')))

out:
Enter a phrase: Ixiee
Gxggg
-----------
answer = 10 / 0
try:

    number = int(input('Enter a number: '))
    print(number)
# saving the actual error that the divisible by zero throws to a variable(err)
except ZeroDivisionError as err:
    input(err)
# printout a specific message if there is invalid input
except ValueError:
    print("Invalid input")

out:
division by zero
--------
# r - read, w - write, r+ read and write, open keyword is used to open the file.
employee_file = open("employee.txt", "r")
# print(employee_file.read()) - reads the contents of the file
# print(employee_file.readable()) - checks if the file is readable or not and output is in boolean True or False
# print(employee_file.readline()) - Reads the first line in the file and moves the cursor to the next line
# print(employee_file.readline()) - Same as above
# print(employee_file.readlines()) - Shares the data in a list format

for employee in employee_file.readlines():
    print(employee)
employee_file.close()

out:
Jim = Salesman

Dwight = Salesman

Pam = Receptionist

Michael = Manager

Oscar = Accountant
-----------

employee_file = open('employee.txt', 'a')
# w will overwrite the contents of the file
# employee_file = open('employee1.txt', 'a') - This will create a new file

employee_file.write("\nKevin = Accountant")
employee_file.close()

out in employee.txt file - Kevin was added on a new line
----------
Todo list

todos = []

while True:
    user_action = input("Do you want to add, show or exit: ")

    match user_action:
        case "add":
            to_do = input("Enter the todo: ")
            todos.append(to_do)
        case"show":
            print(todos)
        case "exit":
            break

print("bye")

